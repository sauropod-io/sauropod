name: Build Release

on:
  # Generate release artifacts when any tag is pushed
  push:
    tags:
      - "v*"

env:
  # We don't need incremental compilation in CI
  CARGO_INCREMENTAL: "0"
  CARGO_TERM_COLORS: always

jobs:
  generate-target-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.generate-target-matrix.outputs.matrix }}
      container-matrix: ${{ steps.generate-target-matrix.outputs.container-matrix }}
    steps:
      - id: generate-target-matrix
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        with:
          script: |
            function matrixEntry(arch, os, image, variants = []) {
              let goarch;
              switch (arch) {
                case 'x86_64':
                  goarch = 'amd64';
                  break;
                case 'aarch64':
                  goarch = 'arm64';
                  break;
                default:
                  throw new Error(`Unsupported architecture: ${arch}`);
              }

             const entries = []
              const base = {
                arch,
                goarch,
                os,
                image,
                binary_suffix: `${arch}-${os}`,
              };
              if (variants.length > 0) {
                for (const variant of variants) {
                  entries.push({
                    ...base,
                    binary_suffix: `${base.binary_suffix}-${variant}`,
                    variant,
                  });
                }
              } else {
                entries.push(base);
              }
              return entries
            }

            const matrix = [];
            const containerMatrix = matrixEntry('x86_64', 'linux', 'ubuntu-latest', ['cuda', 'vulkan']);

            if (context.repo.repo == 'sauropod' && context.repo.owner == 'sauropod-io') {
              containerMatrix.push(...matrixEntry('aarch64', 'linux', 'ubuntu-24.04-arm', ['cuda', 'vulkan']))
              matrix.push(...matrixEntry('aarch64', 'macos', 'macos-latest'));
            }

            core.setOutput('matrix', JSON.stringify(matrix));
            core.setOutput('container-matrix', JSON.stringify(containerMatrix));
  build-release-binaries:
    needs: [generate-target-matrix]
    strategy:
      matrix:
        include: ${{ fromJson(needs.generate-target-matrix.outputs.matrix) }}
    if: fromJson(needs.generate-target-matrix.outputs.matrix).length > 0
    permissions:
      id-token: write
      contents: read
      attestations: write
    runs-on: ${{ matrix.image }}
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Set up
        uses: ./.github/actions/set-up-rust
      - name: Install vulkan-tools
        run: sudo apt-get install -y vulkan-tools glslc libvulkan-dev

      - name: Build the release
        run: |
          make release CARGO_FEATURES="${{ matrix.variant }}"
          mv target/optimized-release/sauropod-inference-server sauropod-inference-server-${{ matrix.binary_suffix }}
        env:
          SCCACHE_GHA_ENABLED: "true"
          RUSTC_WRAPPER: "sccache"
          SOURCE_DATE_EPOCH: 0

      - name: Upload artifacts
        id: upload
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: sauropod-inference-server-${{ matrix.binary_suffix }}
          path: |
            sauropod-inference-server-${{ matrix.binary_suffix }}
      - uses: actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be # v2
        with:
          subject-name: sauropod-inference-server-${{ matrix.binary_suffix }}
          subject-digest: sha256:${{ steps.upload.outputs.artifact-digest }}
        if: github.repository == 'sauropod-io/sauropod'

  build-container:
    timeout-minutes: 120
    needs: [generate-target-matrix]
    strategy:
      matrix:
        include: ${{ fromJson(needs.generate-target-matrix.outputs.container-matrix) }}
    permissions:
      packages: write
      contents: read
    runs-on: ${{ matrix.image }}
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Set up Docker
        uses: ./.github/actions/set-up-docker
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Docker metadata
        id: docker-metadata
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.licenses=AGPL-3.0-or-later
          flavor: |
            latest=false
            suffix=-${{ matrix.variant }}
      - name: Build and push image
        id: build
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6
        with:
          file: docker/Dockerfile.${{ matrix.variant }}
          push: false
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          platforms: ${{ matrix.os }}/${{ matrix.goarch }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: ${{ steps.docker-metadata.outputs.labels }}
          secret-envs: |
            actions_results_url=ACTIONS_RESULTS_URL
            actions_runtime_token=ACTIONS_RUNTIME_TOKEN
          outputs: type=image,push-by-digest=true,name-canonical=true,push=true
        env:
          SOURCE_DATE_EPOCH: 0

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"
      - name: Upload digest
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: digests-${{ matrix.variant }}-${{ matrix.os }}-${{ matrix.goarch }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  create-release:
    runs-on: ubuntu-latest
    needs: [build-release-binaries, build-container]
    permissions:
      contents: write
      id-token: write
      packages: write
      attestations: write
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Set up Docker
        uses: ./.github/actions/set-up-docker
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Download container digests
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true
      - name: Docker metadata
        id: docker-metadata
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5
        with:
          flavor: |
            latest=false
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
      - name: Create container manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@sha256:%s ' *)
      - name: Get final merged image digest
        run: |
          echo "IMAGE_DIGEST=$(docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.docker-metadata.outputs.version  }} --format '{{ json .Manifest.Digest }}' | jq -r)" >> $GITHUB_ENV
      - name: Attestation for Docker image
        uses: actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be # v2
        id: attest
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ env.IMAGE_DIGEST }}
          push-to-registry: true
        if: github.repository == 'sauropod-io/sauropod'

      - name: Download X86 artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4
        with:
          path: binaries
          # We don't use `sauropod-inference-server-*` here because it will capture Docker artifacts
          pattern: |
            sauropod-inference-server-x86_64-*
          merge-multiple: true
      - name: Download Aarch64 artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4
        with:
          path: binaries
          pattern: sauropod-inference-server-aarch64-*
          merge-multiple: true
        if: github.repository == 'sauropod-io/sauropod'
      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@72f2c25fcb47643c292f7107632f7a47c1df5cd8 # v2
        with:
          fail_on_unmatched_files: true
          files: binaries/*
          draft: true
